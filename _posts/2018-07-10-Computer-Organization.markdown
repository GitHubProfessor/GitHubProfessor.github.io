---
layout: post
title:  "计算机组成原理"
date:   2018-07-10 00:00:09 -0200
description: 计算机组成原理
permalink: /ComputerOrganization/
---


# 计算机结构的简化模型(模型机)

![Image](\assets\img\ComputerOrganization\1-4\1.jpg)

> 注意：
    上图中绿色的箭头(控制总线,地址总线,数据总线),属于系统总线;
    橘黄色箭头(内部总线)属于片内总线.

下面简单介绍下总线的分类:
按功能分,分为
●片内总线 : 芯片内部的总线(CPU中的总线),它是CPU内部寄存器与寄存器之间,寄存器与ALU之间的公共连接线
●系统总线 : 计算机系统内部各个功能部件(CPU,内存,I/O设备)之间相互连接的总线
●通信总线(外部总线):计算机系统之间或者计算机系统与其他系统(远程通讯设备,测试设备)之间信息传递的总线


## 模型机的存储器
![Image](\assets\img\ComputerOrganization\1-4\2.jpg)

CPU要想操作存储其中的某个存储单元的内容,必须先通过地址总线将访问存储单元的存储地址通过地址总线传递给CPU
假如地址总线的宽度是32位,那么CPU能管理的存储单元最多为2的32次方,也就是4G

CPU发来的地址,会放在MAR中
CPU要读取的数据会通过数据总线传送,数据会被放在MDR中

控制总线与[控制逻辑]相连,用来接收CPU的读写信号,或者想CPU反馈传输已经完成的信号


## 模型机的CPU:控制器
![Image](\assets\img\ComputerOrganization\1-4\3.jpg)

![Image](\assets\img\ComputerOrganization\1-4\4.png)

IR:存放正在执行或者即将执行的指令.指令是从存储器中取来的,暂时存放在IR中
PC:用于存放下一条的存储单元地址,具有自动增加计数的功能
存储器地址寄存器MAR:存放要访问存储器的地址
存储器数据寄存器MDR:存放要写到存储器或者从存储器取到的数据

![Image](\assets\img\ComputerOrganization\1-4\5.png)

指令译码:用于对IR中的指令进行译码,从而确定IR中存放的是那一条指令
控制电路:当确定了执行那条指令后,控制电路便可以产生对应的控制信号,然后通过时序脉冲去控制CPU中各个部件的动作


## 模型机的CPU:运算器
![Image](\assets\img\ComputerOrganization\1-4\6.png)

### 运算器的基本组成
![Image](\assets\img\ComputerOrganization\1-4\7.png)

2个输入一个输出.比如完成一个加法运算,操作数分别从A端口和B端口输入,然后经过ALU的运算后将结果送到输出端口
X,Y,Z表示暂时保存数据用的寄存器,ALU对XYZ中的数据进行运算.
ALU在运算时,同时会产生相应的状态,比如运算结果是否产生进位,是否溢出,这些结果会放到F中.
运算需要的数据,来自于存储器,但是如果每次都从存储器取数据,效率太低,所以就会有了R0……Rn-1(通用寄存器),这里面的数据可以来自于存储区,也可以来自于其他的同用存储器,比如从ALU计算的数据,也可以放到R0中.
也就是所可以再不同的通用寄存器之间传递数据


## CPU的内部总线
![Image](\assets\img\ComputerOrganization\1-4\8.png)

内部总线用于在CPU内部各个部件之间传递数据的装置
举例子:
R0传到X,就需要通过内部总线来传送.

内部总线看作是出入水的水管,R0和X可以看做是蓄水池,她们分别有自己的进水口和出水口,从图中看到,R0和内部总线之间有2个箭头,说明他既可以进数据,也可以出数据.而X与内部总线之间只有一个指向X的箭头,说明X只能从内部总线获取数据,不能像内部总线发数据.


